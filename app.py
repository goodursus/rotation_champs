import streamlit as st
import pandas as pd
import numpy as np
import time
from datetime import datetime, timedelta
import player_management as pm
import court_allocation as ca
import timer as tm
import tournament as tr
import player_matching as match
import court_designer as designer
import leaderboard as lb

# Set page configuration
st.set_page_config(
    page_title="Rotation Players",
    page_icon="üè∏",
    layout="wide"
)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Streamlit
def enable_auto_refresh():
    """
    –í–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ç–∞–π–º–µ—Ä–æ–º
    """
    # –ï—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ, –≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    if st.session_state.get('game_active', False) and not st.session_state.get('game_paused', True):
        time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
        st.rerun()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–∞–π–º–µ—Ä–µ
if 'update_counter' not in st.session_state:
    st.session_state.update_counter = 0
else:
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, –µ—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ
    if st.session_state.get('game_active', False) and not st.session_state.get('game_paused', True):
        st.session_state.update_counter += 1

# Initialize session state variables if they don't exist
if 'players_df' not in st.session_state:
    # Initialize with sample players for example (14 players)
    st.session_state.players_df = pd.DataFrame({
        'id': list(range(1, 15)),
        'name': [f"Player {i}" for i in range(1, 15)],
        'wins': [0] * 14,
        'losses': [0] * 14,
        'points_difference': [0] * 14,
        'rating': [0] * 14
    })

if 'courts' not in st.session_state:
    st.session_state.courts = []

if 'game_active' not in st.session_state:
    st.session_state.game_active = False

if 'game_paused' not in st.session_state:
    st.session_state.game_paused = False

if 'game_duration' not in st.session_state:
    st.session_state.game_duration = 15  # Default 15 minutes

if 'start_time' not in st.session_state:
    st.session_state.start_time = None

if 'pause_time' not in st.session_state:
    st.session_state.pause_time = None

if 'elapsed_pause_time' not in st.session_state:
    st.session_state.elapsed_pause_time = 0

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–¥–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤
if 'matchmaking_strategy' not in st.session_state:
    st.session_state.matchmaking_strategy = '–°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'

# Main application layout
st.title("Rotation Players")

# Create tabs for separating content
tab1, tab2, tab3, tab4, tab5 = st.tabs(["Courts & Timer", "Player Statistics", "Tournament", "Leaderboard", "Court Designer"])

with tab1:
    # Create layout with two columns
    col1, col2 = st.columns([2, 1])

    with col1:
        # Display courts with players
        st.header("Courts")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤
        with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤"):
            st.session_state.matchmaking_strategy = st.radio(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤:",
                ["–°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ –Ω–∞–≤—ã–∫–∞–º"]
            )
            
            if st.session_state.matchmaking_strategy == "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ –Ω–∞–≤—ã–∫–∞–º":
                st.info("""
                    **–û–ø–∏—Å–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:** 
                    –≠—Ç–æ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 
                    –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥. –ò–≥—Ä–æ–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º 
                    —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –º–µ–∂–¥—É –∫–æ—Ä—Ç–∞–º–∏ –º–µ—Ç–æ–¥–æ–º "–∑–º–µ–π–∫–∏", —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –∏—Ö 
                    —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ. –ó–∞—Ç–µ–º –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ –∫–æ—Ä—Ç–∞ –∏–≥—Ä–æ–∫–∏ –¥–µ–ª—è—Ç—Å—è 
                    –Ω–∞ –∫–æ–º–∞–Ω–¥—ã —Ç–∞–∫, —á—Ç–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –≤ —Å—É–º–º–∞—Ä–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –∫–æ–º–∞–Ω–¥.
                """)
            else:
                st.info("""
                    **–û–ø–∏—Å–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:** 
                    –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ—Ä—Ç–∞–º –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞.
                """)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä—Ç–æ–≤
        if st.session_state.courts:
            ca.display_courts(st.session_state.courts, st.session_state.players_df)
        else:
            st.info("Click 'Distribute Players' to allocate players to courts.")

        # Game timer controls
        st.header("Game Timer")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∞–π–º–µ—Ä–∞
        timer_status = ""
        if st.session_state.game_active:
            if st.session_state.game_paused:
                timer_status = "‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            else:
                timer_status = "‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–Ω–æ"
        else:
            timer_status = "‚èπÔ∏è –ù–µ –∑–∞–ø—É—â–µ–Ω–æ"
            
        st.write(f"**–°—Ç–∞—Ç—É—Å —Ç–∞–π–º–µ—Ä–∞:** {timer_status}")
        
        col_timer1, col_timer2, col_timer3 = st.columns(3)
        
        with col_timer1:
            st.session_state.game_duration = st.number_input(
                "Game Duration (minutes)", 
                min_value=1, 
                max_value=120, 
                value=st.session_state.game_duration
            )
            
        with col_timer2:
            elapsed_time, elapsed_seconds, remaining_time, remaining_seconds = tm.calculate_game_time()
            
            # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä–∞
            update_count = st.session_state.get('update_counter', 0)
            reset_count = st.session_state.get('reset_counter', 0)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞
            elapsed_label = "Elapsed Time"
            if st.session_state.game_active:
                if not st.session_state.game_paused:
                    elapsed_label = "‚è± Elapsed Time"
                    delta_value = "+1s" if update_count > 0 else None
                else:
                    elapsed_label = "‚è∏ Elapsed Time"
                    delta_value = None
            else:
                elapsed_label = "‚èπ Elapsed Time"
                delta_value = None
                
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            st.metric(
                elapsed_label, 
                f"{elapsed_time}:{elapsed_seconds:02d}", 
                delta=delta_value, 
                delta_color="normal" if delta_value else "off",
                help=f"Updates: {update_count}, Resets: {reset_count}"
            )
            
        with col_timer3:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            remaining_label = "Remaining Time"
            if st.session_state.game_active and not st.session_state.game_paused:
                remaining_label = "‚è± Remaining Time"
                delta_value = "-1s" if update_count > 0 else None
            else:
                delta_value = None
                
            st.metric(
                remaining_label, 
                f"{remaining_time}:{remaining_seconds:02d}", 
                delta=delta_value, 
                delta_color="normal" if delta_value else "off",
                help=f"Duration: {st.session_state.game_duration} min"
            )
        
        col_btn1, col_btn2, col_btn3, col_btn4 = st.columns(4)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ç—É—Ä–Ω–∏—Ä
        active_tournament_id = st.session_state.get('active_tournament_id')
        tournament_active = active_tournament_id is not None
        
        # –ï—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–∞–π–º–µ—Ä–∞ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º
        if not tournament_active:
            st.warning("–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä –Ω–∞ –≤–∫–ª–∞–¥–∫–µ 'Tournament'")
        
        with col_btn1:
            if not st.session_state.game_active:
                if st.button("Start Game", use_container_width=True, disabled=not tournament_active):
                    tm.start_game()
                    st.rerun()
            else:
                if st.session_state.game_paused:
                    if st.button("Resume Game", use_container_width=True, disabled=not tournament_active):
                        tm.resume_game()
                        st.rerun()
                else:
                    if st.button("Pause Game", use_container_width=True, disabled=not tournament_active):
                        tm.pause_game()
                        st.rerun()
        
        with col_btn2:
            if st.button("Reset Timer", use_container_width=True, disabled=not tournament_active):
                tm.reset_game()
                st.rerun()
        
        with col_btn3:
            if st.button("Distribute Players", use_container_width=True):
                st.session_state.courts = ca.distribute_players(st.session_state.players_df)
                st.rerun()
                
        with col_btn4:
            if st.button("Rotate Players", use_container_width=True):
                ca.rotate_players()
                st.rerun()

    with col2:
        # Player management section
        st.header("Players")
        pm.manage_players()

with tab2:
    # Display player statistics
    st.header("Player Statistics")
    pm.display_player_stats()

with tab3:
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç—É—Ä–Ω–∏—Ä–∞
    st.header("Tournament Mode")
    tr.display_tournament()

with tab4:
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
    st.header("Leaderboard")
    # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
    lb.display_leaderboard()
    
    # –î–µ–º–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞–Ω–∏–º–∞—Ü–∏–∏
    with st.expander("–î–µ–º–æ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"):
        lb.display_leaderboard_animation_demo()

with tab5:
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∏–∑–∞–π–Ω–µ—Ä –∫–æ—Ä—Ç–æ–≤
    st.header("Court Designer")
    designer.display_court_designer()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Ç–∞–π–º–µ—Ä—É)
if st.session_state.get('timer_needs_reset', False):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    st.session_state.timer_needs_reset = False
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    tm.reset_game()
    # –î–µ–ª–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.rerun()

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
if st.session_state.get('show_results_notification', False):
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    st.success("–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏—Ö.")
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.session_state.show_results_notification = False

# –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω
enable_auto_refresh()
